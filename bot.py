#!/usr/bin/env python

import logging
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'storage_dvmn.settings')
django.setup()

import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'storage_dvmn.settings')
django.setup()

from dotenv import load_dotenv
<<<<<<< Updated upstream
from telegram import (KeyboardButton, LabeledPrice, ReplyKeyboardMarkup,
                      ReplyKeyboardRemove, ShippingOption, Update, InlineKeyboardButton,
                      InlineKeyboardMarkup)
from telegram.ext import (CallbackContext, CommandHandler, ContextTypes,
                          ConversationHandler, Filters, CallbackQueryHandler,
                          MessageHandler,
                          PreCheckoutQueryHandler, ShippingQueryHandler,
                          Updater)

from catalog.models import (Order, Storage, Tariff, User, check_if_agreement,
                            create_db_order, create_db_user, get_db_tariff,
                            get_db_user, get_nearest_storage, update_db_order,
                            update_db_user)
=======
from telegram import (KeyboardButton, ShippingOption, ReplyKeyboardMarkup, ReplyKeyboardRemove,
                      Update, LabeledPrice)
from telegram.ext import (CallbackContext,  ContextTypes, CommandHandler, ConversationHandler,
                          Filters, MessageHandler, Updater, PreCheckoutQueryHandler,
                          ShippingQueryHandler)

from catalog.models import User, Order, Tariff, get_db_tariff, update_db_order, update_db_user, \
    create_db_user, create_db_order, check_if_agreement, get_db_user

>>>>>>> Stashed changes

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

AGREEMENT, GET_NUMBER, GET_NAME, MENU, ORDERS, ORDER_ADDRESS, ORDER_NEW, \
<<<<<<< Updated upstream
    GET_TARIFF, ORDER_DATE, ORDER_APPROVE, ORDER_SIZE, \
    ORDER_SEND, CHECKOUT = range(13)
=======
GET_TARIFF, ORDER_DATE, ORDER_APPROVE, ORDER_SIZE, \
ORDER_SEND, CHECKOUT = range(13)
>>>>>>> Stashed changes


def start(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['–î–∞–ª–µ–µ']]
    update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å SELF_STORAGE!\n'
        '–ú—ã –¥–µ–ª–∞–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—â–µ–π —É–¥–æ–±–Ω—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º.\n\n'
        '–ü—Ä–∏—Å—Ç—É–ø–∏–º?',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True, one_time_keyboard=True
        ),
    )
    if not check_if_agreement(update):
        return AGREEMENT
    return MENU
<<<<<<< Updated upstream

=======
>>>>>>> Stashed changes

def agreement(update: Update, context: CallbackContext) -> int:
    create_db_user(update)
    update_db_user(tg_id=update.message.chat.id, agreement=True)
    update.message.reply_text(
        '–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ –º–Ω–µ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?\n\n'
        '–í–ù–ò–ú–ê–ù–ò–ï! –û—Ç–ø—Ä–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å '
        '—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n'
        '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–º –ø–æ —Å—Å—ã–ª–∫–µ:\n'
        'https//agreement.ru/agr.pdf', reply_markup=ReplyKeyboardRemove()
    )
    return GET_NAME
    # return MAIN


def get_phone(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    print(update)
    contact_keyboard = KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚û°Ô∏è')
    reply_keyboard = [[contact_keyboard]]
    update.message.reply_text(
        '–°–ø–∞—Å–∏–±–æ! \n'
        '–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å–æ–∑–¥–∞–Ω üëç',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
            one_time_keyboard=True)
    )
    logger.info("Phone of %s: %s", user.username, update.message.text)

    return MENU


def get_name(update: Update, context: CallbackContext) -> int:
    update_db_user(tg_id=update.message.chat.id, name=update.message.text)
    user = update.message.from_user
    contact_keyboard = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä',
                                      request_contact=True
                                      )
    reply_keyboard = [[contact_keyboard]]
    # update_db_user(tg_id=user.id, name=user.name)
    logger.info("Name of %s: %s", user.first_name, update.message.text)
    update.message.reply_text(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {update.message.text}\n'
                              '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º, '
                              '—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏',
                              reply_markup=ReplyKeyboardMarkup(
                                  reply_keyboard, resize_keyboard=True,
                                  one_time_keyboard=True)
                              )

    return GET_NUMBER


def menu(update: Update, context: CallbackContext) -> int:
    user = get_db_user(update)
<<<<<<< Updated upstream
    orders_qty = Order.objects.filter(user=user).count()
    reply_keyboard = [['–ù–æ–≤—ã–π –∑–∞–∫–∞–∑', '–ú–æ–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è'], ['–û —Å–µ—Ä–≤–∏—Å–µ']]
    update.message.reply_text(
        f'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {user.name}\n\n'
        f'–í—Å–µ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏–π: {orders_qty}\n'
        '\n'
=======
    reply_keyboard = [['–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'], ['–ú–æ–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è'], ['–û —Å–µ—Ä–≤–∏—Å–µ']]
    update.message.reply_text(
        f'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {user.name}\n\n'
        f'–í—Å–µ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏–π: 5\n'
        '–ë–ª–∏–∂–∞–π—à–∞—è –æ–ø–ª–∞—Ç–∞: 24.12.2020\n'
>>>>>>> Stashed changes
        '–ß—Ç–æ–±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–µ–π—á–∞—Å —Å–¥–µ–ª–∞—Ç—å?',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True, row_width=2,
            one_time_keyboard=True)
    )
    return MENU


def new(update: Update, context: CallbackContext) -> int:
    context.user_data['order_id'] = create_db_order(update)
    reply_keyboard = [['–ü—Ä–∏–≤–µ–∑—É —Å–∞–º. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤'],
                      ['–•–æ—á—É, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞–ª –∫—É—Ä—å–µ—Ä'],
                      ['–¢–∞—Ä–∏—Ñ—ã'],
                      ['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']]
    update.message.reply_text(
        '''
–û–§–û–†–ú–ò–¢–¨ –ù–û–í–´–ô –ó–ê–ö–ê–ó
–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!

–ï—Å—Ç—å 2 –æ–ø—Ü–∏–∏:
1) –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–µ–∑—Ç–∏ –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥
2) –û—Ñ–æ—Ä–º–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤—ã–≤–æ–∑ –∫—É—Ä—å–µ—Ä–æ–º

–ö–∞–∫ –¥–µ–π—Å—Ç–≤—É–µ–º?''',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
            one_time_keyboard=True)
    )
    return ORDER_NEW


def get_location(update: Update, context: CallbackContext) -> int:
    print(update)
    location = update.message.location
    nearest_storage_id = get_nearest_storage(location)
    context.user_data['storage'] = nearest_storage_id
    nearest_storage = Storage.objects.get(id=nearest_storage_id)
    reply_keyboard = [['–û–∫! –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Å–∫–ª–∞–¥'],
                      ['–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥']
                      ]

    update.message.reply_text(f'''
–í–∞—à –±–ª–∏–∂–∞–π—à–∏–π —Å–∫–ª–∞–¥:
{nearest_storage.title}
–ü–æ –∞–¥—Ä–µ—Å—É:
{nearest_storage.address}
–û–∫?
''', reply_markup=ReplyKeyboardMarkup(
        reply_keyboard, resize_keyboard=True,
        one_time_keyboard=True))
    return ORDER_NEW


def selfstorage(update: Update, context: CallbackContext) -> int:
    print(context.user_data)
<<<<<<< Updated upstream
    location_keyboard = KeyboardButton('–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
                                       request_location=True
                                       )
    reply_keyboard = [[location_keyboard],
                      ['–°–∫–ª–∞–¥ –Ω–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∫–µ'],
=======
    reply_keyboard = [['–°–∫–ª–∞–¥ –Ω–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∫–µ'],
>>>>>>> Stashed changes
                      ['–°–∫–ª–∞–¥ –Ω–∞ –†—è–∑–∞–Ω–∫–µ'],
                      ['–°–∫–ª–∞–¥ –Ω–∞ –í–∞—Ä—à–∞–≤–∫–µ']]
    update.message.reply_text(
        '''
–ê–î–†–ï–°–ê –°–ö–õ–ê–î–û–í
<<<<<<< Updated upstream
–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ c 08.00 - 22.00

–°–ö–õ–ê–î –ù–ê –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∫–µ
–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–µ —à–æ—Å—Å–µ, 54
=======

–°–ö–õ–ê–î –ù–ê –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∫–µ
–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–µ —à–æ—Å—Å–µ, 54
–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 

–ï–∂–µ–¥–Ω–µ–≤–Ω–æ
c 08.00 - 22.00
>>>>>>> Stashed changes

–°—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞:
https://yandex.ru/maps/-/CCUNm-QpGB

–°–ö–õ–ê–î –ù–ê –í–ê–†–®–ê–í–ö–ï
–í–∞—Ä—à–∞–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, 121
<<<<<<< Updated upstream
=======
–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 

–ï–∂–µ–¥–Ω–µ–≤–Ω–æ
c 08.00 - 22.00
>>>>>>> Stashed changes

–°—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞:
https://yandex.ru/maps/-/CCUNm-QpGB

–°–ö–õ–ê–î –ù–ê –†—è–∑–∞–Ω–∫–µ
<<<<<<< Updated upstream
–†—è–∑–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 79
=======
–†—è–∑–∞–Ω—Å–∫–æ–µ —à–æ—Å—Å–µ, 123
–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 

–ï–∂–µ–¥–Ω–µ–≤–Ω–æ
c 08.00 - 22.00
>>>>>>> Stashed changes

–°—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞:
https://yandex.ru/maps/-/CCUNm-QpGB

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∫–ª–∞–¥:''',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
            one_time_keyboard=True)
    )
    print(update)
    return ORDER_NEW


def get_order_adress(update: Update, context: CallbackContext) -> int:
<<<<<<< Updated upstream
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –∑–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑\n\n'
=======
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –∑–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑\n'
>>>>>>> Stashed changes
                              '–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:\n\n'
                              '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –¥–æ–º 3, –∫–≤ 1')

    return ORDER_DATE


def get_order_date(update: Update, context: CallbackContext) -> int:
    print(context.user_data)
    id = context.user_data['order_id']
    update_db_order(id=id, address=update.message.text)
    user = update.message.from_user
    # order_id = create_db_order(tg_id=used.id)
    # user_data
    # update_db_order(id=order_id, name=user.name)
    logger.info("–ê–¥—Ä–µ—Å of %s: %s", user.first_name, update.message.text)
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏\n'
                              '–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:\n\n'
                              '23.12 —Å 18:00-23:00')
    return GET_TARIFF
<<<<<<< Updated upstream


=======


>>>>>>> Stashed changes
def send_order_success(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'],
                      ['–û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑']]
    update.message.reply_text(
        '''
–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!
–£–∂–µ —Å–∫–æ—Ä–æ –º—ã –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º, –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è!

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!
  ''',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True)
    )
    return MENU
<<<<<<< Updated upstream


def choose_storage(update: Update, context: CallbackContext):
    if update.message.text == '–°–∫–ª–∞–¥ –Ω–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∫–µ':
        context.user_data['storage'] = 1
    if update.message.text == '–°–∫–ª–∞–¥ –Ω–∞ –†—è–∑–∞–Ω–∫–µ':
        context.user_data['storage'] = 2
    if update.message.text == '–°–∫–ª–∞–¥ –Ω–∞ –í–∞—Ä—à–∞–≤–∫–µ':
        context.user_data['storage'] = 3

=======


def choose_storage(update:Update, context: CallbackContext):
    if update.message.text =='–°–∫–ª–∞–¥ –Ω–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∫–µ':
        context.user_data['storage'] = 1
    if update.message.text =='–°–∫–ª–∞–¥ –Ω–∞ –†—è–∑–∞–Ω–∫–µ':
        context.user_data['storage'] = 2
    if update.message.text =='–°–∫–ª–∞–¥ –Ω–∞ –í–∞—Ä—à–∞–≤–∫–µ':
        context.user_data['storage'] = 3


>>>>>>> Stashed changes

def get_tariff(update: Update, context: CallbackContext):
    id = context.user_data['order_id']
    print(context.user_data)
    update_db_order(id=id, address=update.message.text)
    choose_storage(update=update, context=context)
    print(context.user_data)
    reply_keyboard = [['–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω - 1890 —Ä—É–±'],
                      ['–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω - 3490 —Ä—É–±'],
                      ['–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω - 8990 —Ä—É–±']]
    update.message.reply_text(
        '''
<<<<<<< Updated upstream
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ
–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è - 30 –¥–Ω–µ–π

–¢–ê–†–ò–§–´

1 –∫–æ—Ä–æ–±–∫–∞ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä 50—Ö50—Ö50 —Å–º

**–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω** = 15 –∫–æ—Ä–æ–±–æ–∫ ‚Äî
1990 —Ä—É–±. –≤ –º–µ—Å.

**–¢–∞—Ä–∏—Ñ –ö–ª–∞–¥–æ–≤–∫–∞** = 30 –∫–æ—Ä–æ–±–æ–∫ ‚Äî
3490 —Ä—É–±. –≤ –º–µ—Å.

**–¢–∞—Ä–∏—Ñ –ì–∞—Ä–∞–∂**  = 90 –∫–æ—Ä–æ–±–æ–∫ ‚Äî
8990 —Ä—É–±. –≤ –º–µ—Å.

''',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
            one_time_keyboard=True)
    )
    return ORDER_NEW
=======
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ 
–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è - 30 –¥–Ω–µ–π

–¢–ê–†–ò–§–´

1 –∫–æ—Ä–æ–±–∫–∞ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä 50—Ö50—Ö50 —Å–º
>>>>>>> Stashed changes

**–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω** = 15 –∫–æ—Ä–æ–±–æ–∫ ‚Äî
1990 —Ä—É–±. –≤ –º–µ—Å.

<<<<<<< Updated upstream
def get_tariff_id(update, context):
    if update.message.text == '–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω - 1890 —Ä—É–±':
        context.user_data['tariff_id'] = 1
    if update.message.text == '–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω - 3490 —Ä—É–±':
        context.user_data['tariff_id'] = 2
    if update.message.text == '–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω - 8990 —Ä—É–±':
        context.user_data['tariff_id'] = 3


def get_qr(update, context: CallbackContext):
    print(update)
    query = update.callback_query
    order_id = query.data
    print(query.message.chat.id)
    # `CallbackQueries` —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞, –¥–∞–∂–µ –µ—Å–ª–∏
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º
    #  —Å–ª—É—á–∞–µ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.
    # —Å–º–æ—Ç—Ä–∏ https://core.telegram.org/bots/api#callbackquery.
    query.answer()
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–µ–º —Å–∞–º—ã–º –∫–Ω–æ–ø–∫–∏
    # –≤ —á–∞—Ç–µ –∑–∞–º–µ–Ω—è—Ç—Å—è –Ω–∞ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç.
    qr_core_url = 'http://a1480.phobos.apple.com/us/r30/Purple3/v4/fb/59/cf/fb59cf06-' \
                  '0cf9-fc66-7407-7773231070c9/pr_source.png?downloadKey=1413818465_' \
                  '86a7cb3f5224397e9d01a712aa6cea91'
    context.bot.send_message(query.message.chat.id, f'–ó–∞–∫–∞–∑ ‚Ññ{order_id}.\n'
                                                    f'QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è')
    context.bot.send_photo(query.message.chat.id, qr_core_url)


def send_invoice(update: Update, context: CallbackContext) -> None:
    get_tariff_id(update=update, context=context)
    tariff_id = context.user_data['tariff_id']
    tariff = get_db_tariff(tariff_id)
    chat_id = update.message.chat_id
    print(context.user_data)
    title = "SELF-STORAGE"
    description = f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff.title} - {tariff.days} –¥–Ω–µ–π"
    payload = "Custom-Payload"
    provider_token = "1832575495:TEST:d716d6144b02e9434eb14ddf6fdeca937cfb2d68881492ea202a42a41eabe886"
    currency = "RUB"
    prices = [LabeledPrice(f'{tariff.title}-{tariff.days} –¥–Ω–µ–π',
                           tariff.price * 100)]
    context.bot.send_invoice(
        chat_id,
        title,
        description,
        payload,
        provider_token,
        currency,
        prices,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        is_flexible=True,
    )


def precheckout_callback(update: Update, context: CallbackContext) -> None:
    print('–º—ã –≤ –ø—Ä–µ—á–µ–∫–∞—É—Ç–µ')
=======
**–¢–∞—Ä–∏—Ñ –ö–ª–∞–¥–æ–≤–∫–∞** = 30 –∫–æ—Ä–æ–±–æ–∫ ‚Äî
3490 —Ä—É–±. –≤ –º–µ—Å.

**–¢–∞—Ä–∏—Ñ –ì–∞—Ä–∞–∂**  = 90 –∫–æ—Ä–æ–±–æ–∫ ‚Äî 
8990 —Ä—É–±. –≤ –º–µ—Å.

''',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True)
    )
    return ORDER_NEW

def get_tariff_id(update, context):
    if update.message.text == '–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω - 1890 —Ä—É–±':
        context.user_data['tariff_id'] = 1
    if update.message.text == '–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω - 3490 —Ä—É–±':
        context.user_data['tariff_id'] = 2
    if update.message.text == '–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω - 8990 —Ä—É–±':
        context.user_data['tariff_id'] = 3


def send_invoice(update: Update, context: CallbackContext) -> None:
    get_tariff_id(update=update, context=context)
    tariff_id = context.user_data['tariff_id']
    tariff = get_db_tariff(tariff_id)
    chat_id = update.message.chat_id
    print(context.user_data)
    title = "SELF-STORAGE"
    description = f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff.title} - {tariff.days} –¥–Ω–µ–π"
    payload = "Custom-Payload"
    provider_token = "381764678:TEST:39427"
    currency = "RUB"
    prices = [LabeledPrice(f'{tariff.title}-{tariff.days} –¥–Ω–µ–π', tariff.price * 100)]
    context.bot.send_invoice(
        chat_id,
        title,
        description,
        payload,
        provider_token,
        currency,
        prices,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        is_flexible=True,
    )


def precheckout_callback(update: Update, _: CallbackContext) -> None:
>>>>>>> Stashed changes
    query = update.pre_checkout_query
    if query.invoice_payload != 'Custom-Payload':
        query.answer(ok=False, error_message="Something went wrong...")
    else:
        query.answer(ok=True)


<<<<<<< Updated upstream
def successful_payment_callback(update: Update,
                                context: CallbackContext) -> None:
=======
def successful_payment_callback(update: Update, _: CallbackContext) -> None:
>>>>>>> Stashed changes
    print('–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω')
    print(update)
    print(context.bot_data)
    update.message.reply_text("Thank you for your payment!")


def about(update: Update, context: CallbackContext) -> int:
    """About service"""
    print(f'–í—ã –≤ ABOUT {update}')
    reply_keyboard = [['–¢–∞—Ä–∏—Ñ—ã'],
                      ['–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞'],
                      ['–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π'],
                      ['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']]
    update.message.reply_text(
        '''
–•–†–ê–ù–ï–ù–ò–ï –õ–ò–ß–ù–´–ô –í–ï–©–ï–ô
–°–µ—Ä–≤–∏—Å SELF_STORAGE –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Å–ª—É–≥–∏ –ø–æ —Ö—Ä–∞–Ω–µ–Ω–∏—é –≤–µ—â–µ–π –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –ª–∏—Ü.\n
–ú—ã –∑–∞–±–µ—Ä—ë–º –≤–∞—à–∏ –≤–µ—â–∏ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥, —Å–æ—Ö—Ä–∞–Ω–∏–º –∏
–ø—Ä–∏–≤–µ–∑—ë–º –æ–±—Ä–∞—Ç–Ω–æ –≤ **–ª—é–±—É—é —Ç–æ—á–∫—É –ú–æ—Å–∫–≤—ã.**''',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
            one_time_keyboard=True)
    )
    return MENU


def rules(update: Update, context: CallbackContext) -> int:
    """Sevice rules"""
    reply_keyboard = [['–¢–∞—Ä–∏—Ñ—ã'],
                      ['–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π'],
                      ['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']]
    update.message.reply_text(
        '''–•—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ö–ª–∞–¥–æ–≤–∫–∏–Ω - —ç—Ç–æ –ª–µ–≥–∫–æ –∏ —É–¥–æ–±–Ω–æ.

–í—Å–µ , —á—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —ç—Ç–æ 4 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞:

+ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–æ–∫—Å–∞
+ –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—à–µ–≥–æ –≤–∏–∑–∏—Ç–∞ –≤ —Ü–µ–Ω—Ç—Ä —Ö—Ä–∞–Ω–µ–Ω–∏—è –ö–ª–∞–¥–æ–≤–∫–∏–Ω
+ –£–ø–∞–∫—É–π—Ç–µ —Å–≤–æ–∏ –≤–µ—â–∏
+ –ü–µ—Ä–µ–≤–µ–∑–∏—Ç–µ –∏—Ö –Ω–∞ Self Storage

–®–∞–≥ 1. –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–∫—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–æ–∫—Å–∞
–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–ª–æ—â–∞–¥–∏ –æ—Ç 1 –¥–æ 20 –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤.
–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–æ–º, –∫–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –±–æ–∫—Å–∞ –í–∞–º –Ω—É–∂–µ–Ω,\
–ª–µ–≥–∫–æ —Å –Ω–∞—à–µ–π –æ—Ü–µ–Ω–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞. –û–Ω —Å–¥–µ–ª–∞–µ—Ç –≤—Å–µ —Ä–∞—Å—á–µ—Ç—ã –∑–∞ –≤–∞—Å.
–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—à–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.
–ó–≤–æ–Ω–∏—Ç–µ: 8 (495) 181-55-45

–ï—Å–ª–∏ —É –≤–∞—Å –æ–∫–∞–∂–µ—Ç—Å—è –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ –≤–µ—â–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è, \
—á–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–ª–æ—Å—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ, –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º –í–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –±–æ–∫—Å.
–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–π –±–æ–∫—Å –Ω–∞ –±–æ–∫—Å –±–æ–ª—å—à–µ–≥–æ –∏–ª–∏ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.

–®–∞–≥ 2. –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä—É–π—Ç–µ –±–æ–∫—Å

–ö–æ–≥–¥–∞ –≤—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç–µ —Å–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, –≤—ã —Ç–∞–∫–∂–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç–µ\
–µ–≥–æ —Ü–µ–Ω—É –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–ú—ã –±—É–¥–µ–º –¥–µ—Ä–∂–∞—Ç—å –±—Ä–æ–Ω—å –¥–ª—è –í–∞—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 3-—Ö –¥–Ω–µ–π.
–ú—ã –Ω–µ –±–µ—Ä–µ–º –æ–ø–ª–∞—Ç—É –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. \
–í–∞–º –¥–∞–∂–µ –Ω–µ –Ω—É–∂–Ω–æ –¥–∞–≤–∞—Ç—å –Ω–∞–º –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - \
–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
–ï—Å–ª–∏ —É –≤–∞—Å –∏–∑–º–µ–Ω—è—Ç—å—Å—è –ø–ª–∞–Ω—ã –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏\
–æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

–®–∞–≥ 3. –£–ø–∞–∫—É–π—Ç–µ —Å–≤–æ–∏ –≤–µ—â–∏

–ü—Ä–∞–≤–∏–ª—å–Ω–æ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—â–∏, —Å–¥–µ–ª–∞—é—Ç –≤–∞—à –ø–µ—Ä–µ–µ–∑–¥ –±–æ–ª–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º.
–£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ —É–ø–∞–∫–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ª–µ–≥–∫–æ, —Å–ª–µ–¥—É—è –Ω–∞—à–∏–º —Å–æ–≤–µ—Ç–∞–º –ø–æ —É–ø–∞–∫–æ–≤–∫–µ.

–®–∞–≥ 4. –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞

–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤—Å—Ç—Ä–µ—Ç—è—Ç –í–∞—Å –Ω–∞ —Å–∫–ª–∞–¥–µ, –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ \
–±—ã—Å—Ç—Ä–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑—É—é—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∏ \
–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç, \
–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–Ω–∞—è –∑–æ–Ω–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º –±—ã—Å—Ç—Ä–æ \
–∏ –±–µ–∑ —Ç—Ä—É–¥–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–µ—â–∏ –≤ –±–æ–∫—Å.

''',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
            one_time_keyboard=True)
    )
    return MENU


def prohobited(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['–¢–∞—Ä–∏—Ñ—ã'], ['–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞'], ['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'], ]
    update.message.reply_text(
        '''
–ú—ã –Ω–µ –ø—Ä–∏–º–µ–º –Ω–∞ Self_Storage:
‚Ä¢ —Å–∫–æ—Ä–æ–ø–æ—Ä—Ç—è—â–∏–µ—Å—è –ø—Ä–æ–¥—É–∫—Ç—ã;
‚Ä¢ —é–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è;
‚Ä¢ –í–æ—Å–ø–ª–∞–º–µ–Ω—è—é—â–∏–µ—Å—è –∏ –≤–∑—Ä—ã–≤–æ–æ–ø–∞—Å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞;
‚Ä¢ –ø—Ä–µ–¥–º–µ—Ç—ã –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ –¥—Ä—É–≥–∏–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ\
 —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Ö—Ä–∞–Ω–µ–Ω–∏—è;
‚Ä¢ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É (–∞–π—Ñ–æ–Ω—ã, –∞–π–ø—ç–¥—ã –∏ –¥—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞,
–∏–∑–ª—É—á–∞—é—â–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –≤–æ–ª–Ω—ã –∏ –ø–µ—Ä–µ–¥–∞—é—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é);
‚Ä¢ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∏ –≥–æ—Ä—é—á–µ-—Å–º–∞–∑–æ—á–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞;
‚Ä¢ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏ –±—ã—Ç–æ–≤—ã–µ –∫—Ä–∞—Å–∫–∏ –≤ –Ω–µ–≥–µ—Ä–º–µ—Ç–∏—á–Ω–æ–π \
—É–ø–∞–∫–æ–≤–∫–µ –∏–ª–∏ —Ä–∞–Ω–µ–µ –≤—Å–∫—Ä—ã—Ç–æ–π —É–ø–∞–∫–æ–≤–∫–µ;
‚Ä¢ –∂–∏–¥–∫–æ—Å—Ç–∏, –∫—Ä–æ–º–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö –≥–µ—Ä–º–µ—Ç–∏—á–Ω–æ;
‚Ä¢ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, –æ—Ä—É–∂–∏–µ, –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã –∏ –¥—Ä—É–≥–∏–µ –≤–µ—â–∏, \
–∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º –†–§ –∏–ª–∏ –ø–æ–¥–ª–µ–∂–∞—â–∏–µ –∏–∑—ä—è—Ç–∏—é —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ —Ä–µ—à–µ–Ω–∏—é —Å—É–¥–∞;
‚Ä¢ —Ä–∞—Å—Ç–µ–Ω–∏—è;
‚Ä¢ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–ª–∏ —á—É—á–µ–ª–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö.''',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
            one_time_keyboard=True)
    )
    return MENU


def tariffs(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['–û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑'],
                      ['–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞'],
                      ['–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π'],
                      ['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']]
    update.message.reply_text(
        '''
–¢–ê–†–ò–§–´

1 –∫–æ—Ä–æ–±–∫–∞ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä 50—Ö50—Ö50 —Å–º

**–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω** = 15 –∫–æ—Ä–æ–±–æ–∫ ‚Äî
1990 —Ä—É–±. –≤ –º–µ—Å.

**–¢–∞—Ä–∏—Ñ –ö–ª–∞–¥–æ–≤–∫–∞** = 30 –∫–æ—Ä–æ–±–æ–∫ ‚Äî
3490 —Ä—É–±. –≤ –º–µ—Å.

<<<<<<< Updated upstream
**–¢–∞—Ä–∏—Ñ –ì–∞—Ä–∞–∂**  = 90 –∫–æ—Ä–æ–±–æ–∫ ‚Äî
=======
**–¢–∞—Ä–∏—Ñ –ì–∞—Ä–∞–∂**  = 90 –∫–æ—Ä–æ–±–æ–∫ ‚Äî 
>>>>>>> Stashed changes
8990 —Ä—É–±. –≤ –º–µ—Å.
''',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
            one_time_keyboard=True)
    )
    return MENU


def orders(update: Update, context: CallbackContext) -> int:
    user = User.objects.get(tg_id=update.message.chat.id)
    orders = Order.objects.filter(user=user)
    for order in orders:
<<<<<<< Updated upstream
        keyboard = [
            [
                InlineKeyboardButton("–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data=order.id),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(f'–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {order.id}'
                                  f'\n'
                                  f'–¢–∞—Ä–∏—Ñ: –ß–µ—Ä–¥–∞–∫'
                                  f'–û–ø–ª–∞—á–µ–Ω –¥–æ: 03.08', reply_markup=reply_markup)
=======
        context.bot.send_photo(chat_id=update.effective_chat.id, photo='https://www.akm.ru/upload/iblock/cf1/QR_kod.jpg')
        context.bot.send_message(chat_id=update.effective_chat.id, text=f'–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {order.id}'
                                                                        f'\n'
                                                                        f'–¢–∞—Ä–∏—Ñ: –ß–µ—Ä–¥–∞–∫'
                                                                        f'–û–ø–ª–∞—á–µ–Ω –¥–æ: 03.08')
>>>>>>> Stashed changes
    reply_keyboard = [['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']]
    update.message.reply_text(
        '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç?',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
            one_time_keyboard=True)
    )
    return MENU


def cancel(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("User %s canceled the conversation.",
                user.first_name
                )
    update.message.reply_text(
        'Bye! I hope we can talk again some day.',
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


def main() -> None:
    load_dotenv()
    token = os.getenv('TG_TOKEN')
    """Run the bot."""
    # Create the Updater and pass it your bot's token.
    updater = Updater(token)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    dispatcher.add_handler(PreCheckoutQueryHandler(precheckout_callback))
<<<<<<< Updated upstream
    dispatcher.add_handler(MessageHandler(Filters.successful_payment,
                                          successful_payment_callback))
    dispatcher.add_handler(CallbackQueryHandler(get_qr))
=======
    dispatcher.add_handler(MessageHandler(Filters.successful_payment, successful_payment_callback))


>>>>>>> Stashed changes
    # Add conversation handler with the states GENDER, PHOTO, LOCATION and BIO
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start),
                      CommandHandler('lk', menu),
                      CommandHandler('tariffs', tariffs),
                      CommandHandler('rules', rules),
                      CommandHandler('prohobited', prohobited),
                      CommandHandler('new', new),
                      CommandHandler('check_out', send_invoice)],
        states={
            AGREEMENT: [MessageHandler(Filters.regex('^(–î–∞–ª–µ–µ)$'),
                                       agreement)],
            GET_NUMBER: [MessageHandler(Filters.contact,
                                        get_phone)],
            GET_NAME: [MessageHandler(Filters.text & ~Filters.command,
                                      get_name)],
            MENU: [MessageHandler(Filters.regex('^(–û —Å–µ—Ä–≤–∏—Å–µ)$'),
                                  about),
                   MessageHandler(Filters.regex('^(–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞)$'),
                                  rules),
                   MessageHandler(Filters.regex('–æ–≤—ã–π –∑–∞–∫–∞–∑'),
                                  new),
                   MessageHandler(Filters.regex('^(–ú–æ–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è)$'),
                                  orders),
                   MessageHandler(Filters.regex('–∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö'),
                                  prohobited),
                   MessageHandler(Filters.regex('^(–¢–∞—Ä–∏—Ñ—ã)$'),
                                  tariffs),
                   CommandHandler('menu', menu),
                   MessageHandler(Filters.regex('–î–∞–ª–µ–µ'), menu),
                   MessageHandler(Filters.regex('–∫–∞–±–∏–Ω–µ—Ç'),
                                  menu)
                   ],
            ORDERS: [CommandHandler('orders',
                                    orders)],
            ORDER_NEW: [CommandHandler('orders',
                                       orders),
                        MessageHandler(Filters.regex('–∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤'),
                                       selfstorage),
                        MessageHandler(Filters.regex('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥'),
                                       selfstorage),
                        MessageHandler(Filters.regex('–û–∫! –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Å–∫–ª–∞–¥'),
                                       get_tariff),
                        MessageHandler(Filters.regex('–∞–∑–∞–¥'),
                                       new),
                        MessageHandler(Filters.location,
                                       get_location),
                        MessageHandler(Filters.regex('–∫—É—Ä—å–µ—Ä'),
                                       get_order_adress),
                        MessageHandler(Filters.regex('^(–¢–∞—Ä–∏—Ñ—ã)$'),
                                       tariffs),
                        MessageHandler(Filters.regex('–°–∫–ª–∞–¥ –Ω–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∫–µ'),
                                       get_tariff),
                        MessageHandler(Filters.regex('–°–∫–ª–∞–¥ –Ω–∞ –†—è–∑–∞–Ω–∫–µ'),
                                       get_tariff),
                        MessageHandler(Filters.regex('–°–∫–ª–∞–¥ –Ω–∞ –í–∞—Ä—à–∞–≤–∫–µ'),
                                       get_tariff),
                        MessageHandler(Filters.regex('–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω - 1890 —Ä—É–±'),
                                       send_invoice),
                        MessageHandler(Filters.regex('–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω - 3490 —Ä—É–±'),
                                       send_invoice),
                        MessageHandler(Filters.regex('–¢–∞—Ä–∏—Ñ –ë–∞–ª–∫–æ–Ω - 8990 —Ä—É–±'),
                                       send_invoice),
                        CommandHandler('start',
                                       start),
                        ],
            CHECKOUT: [MessageHandler(Filters.text & ~Filters.command,
<<<<<<< Updated upstream
                                      send_invoice)
=======
                                        send_invoice)
>>>>>>> Stashed changes
                       ],
            ORDER_ADDRESS: [MessageHandler(Filters.text & ~Filters.command,
                                           get_order_adress)],
            ORDER_DATE: [MessageHandler(Filters.text & ~Filters.command,
                                        get_order_date)],
            GET_TARIFF: [MessageHandler(Filters.text & ~Filters.command,
<<<<<<< Updated upstream
                                        selfstorage)],
=======
                                               get_tariff)],
>>>>>>> Stashed changes
            ORDER_SEND: [MessageHandler(Filters.regex('—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'),
                                        send_order_success)
                         ]
        },
        fallbacks=[CommandHandler('cancel',
                                  cancel)],
    )

    dispatcher.add_handler(conv_handler)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
